if(entities.size() > MAX_SIZE){
    boolean state = true;
    List<List<T>> lists = splitCollection(entities, MAX_THREAD);
    long time1 = System.currentTimeMillis();
    // 保证主线程和插入线程的先后执行顺序
    CountDownLatch countDownLatch = new CountDownLatch(lists.size());
    // 先在开启多线程外面，定义一个同步集合：
    List<TransactionStatus> transactionStatuses = Collections.synchronizedList(new ArrayList<>());
    List<Boolean> flagList = Collections.synchronizedList(new ArrayList<>());

    for(List<T> list:lists){
        threadPool.execute(() -> {
            //设置数据源
            DynamicDataSourceContextHolder.setDataSourceRouterKey("slave1");
            // 将每个线程中的事务状态存入集合单当中
            DefaultTransactionDefinition def = new DefaultTransactionDefinition();
            def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW); // 事物隔离级别，开启新事务，这样会比较安全些。
            TransactionStatus status = transactionManager.getTransaction(def); // 获得事务状态
            transactionStatuses.add(status);
            try {
                // 批量插入数据
                addData(list);
                // 提交事务
                transactionManager.commit(status);
            } catch (Exception e) {
                log.info("多线程批量插入错误："+e.getMessage());
                flagList.add(false);
            }
            countDownLatch.countDown();
        });
    }
    try {
        countDownLatch.await();
        // 异常集合中存在数据，回滚全部事务
        if (flagList.size() > 0) {
            for (TransactionStatus transactionStatus : transactionStatuses) {
                transactionStatus.setRollbackOnly();
                transactionManager.rollback(transactionStatus);
            }
            state =false;
            log.info("执行了回滚过程，回滚事物数据集合大小" + transactionStatuses.size());
        }
        long time2 = System.currentTimeMillis();
        log.info("执行批量插入数据耗时" + (int) ((time2 - time1)) / 1000 + "秒");
    } catch (InterruptedException e) {
        state =false;
        log.error("exception",e);
    }
    return state;
}